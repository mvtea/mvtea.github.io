{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# <ins>Week 1, Tutorial 2: Strings, Lists & Arrays</ins>\n",
    "*ASTR 211: Observational Astronomy, Spring 2021* \\\n",
    "*Mason V. Tea*\n",
    "\n",
    "Strings and lists are worth their own separate discussion, since these data types have some special attributes that regular numbers (ints and floats) just don't have. The main thing that sets them apart is the fact that they have *structure*, which we can access and manipulate. In other words, they are _mutable_ data types. The key to doing so, which can be tricky for newcomers to Python, is something called _indexing_."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Indexing\n",
    "\n",
    "You might be wondering how you can access the values in your lists once you've made them, or perhaps how to pick apart your strings. Both lists and strings can be thought of as a container for letters/numbers/symbols in a specific order. The place in the order that each of these symbols has is called its _index_, and we can access these symbols in both lists and strings using this index.\n",
    "\n",
    "One odd thing about Python is that it starts counting at 0 rather than one. So, if we wanted the third letter of the word \"TELESCOPE,\" its index would be 2 rather than 3. It's weird, but you get used to it. Take the word TELESCOPE for example:\n",
    "\n",
    "| T | E | L | E | S | C | O | P | E |\n",
    "| - | - | - | - | - | - | - | - | - |\n",
    "| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |\n",
    "\n",
    "With this in mind, we can talk about accessing certain parts of both lists and strings using indices. We'll continue with the \"TELESCOPE\" example, and I'll demonstrate with both a string and a list.\n",
    "\n",
    "First, let's save a string (\"TELESCOPE\") and a list ([\"T\",\"E\",\"L\",\"E\",\"S\",\"C\",\"O\",\"P\",\"E\"]) for convenience:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "tel_str = \"TELESCOPE\"\n",
    "tel_lst = [\"T\",\"E\",\"L\",\"E\",\"S\",\"C\",\"O\",\"P\",\"E\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Say we wanted to get the third letter of telescope, which should be \"L\". As stated above, the _third_ letter has the _second_ index, so we can write"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "L\n",
      "L\n"
     ]
    }
   ],
   "source": [
    "print(tel_str[2])\n",
    "print(tel_lst[2])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Suppose we're super cool. If we want to print the slang word for telescope, we can take a _slice_ of the string, using the indexes to return just part of it. If I want the word \"SCOPE\" then, I'd want to slice it at the 4th and 8th indices, the syntax for which goes like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SCOP\n",
      "['S', 'C', 'O', 'P']\n"
     ]
    }
   ],
   "source": [
    "print(tel_str[4:8])\n",
    "print(tel_lst[4:8])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(Note the fact that in the first example, when we took just one index, the value from the list was returned directly (i.e. as a string). In the second example, the values we sliced were returned as a list.)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Oh, it seems to have cut off the end of the word. Luckily there's some syntax for that. If we wanted to take the letters from index 4 all the way to the end, then, we just need to leave that last index empty:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SCOPE\n",
      "['S', 'C', 'O', 'P', 'E']\n"
     ]
    }
   ],
   "source": [
    "print(tel_str[4:])\n",
    "print(tel_lst[4:])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So that took the letters from index 4 onward. If we wanted a British telephone, we could do the same thing, but flip the position of the colon, taking the letters _up until_ index 4 instead:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TELE\n",
      "['T', 'E', 'L', 'E']\n"
     ]
    }
   ],
   "source": [
    "print(tel_str[:4])\n",
    "print(tel_lst[:4])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Another thing to notice is that if I have a string with numbers in it, and I access that index, Python will still return it as a string:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(type(\"12345\"[3]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In contrast is the case of a list, which returns whatever the type of the value at the index you accessed is:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "float"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(type([1.0, 'hi', 90][0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(type([1.0, 'hi', 90][1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "int"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(type([1.0, 'hi', 90][2]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Reverse indexing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To make things even more confusing, you can _reverse index_ your lists/strings with negative numbers. Continuing with our TELESCOPE examples, if we wanted the British phone again, we could write"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TELE\n",
      "['T', 'E', 'L', 'E']\n"
     ]
    }
   ],
   "source": [
    "print(tel_str[:-5])\n",
    "print(tel_lst[:-5])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This works from the back, shaving the five letters off the back of the string/list. This doesn't follow the index convention described above, as the last letter has an index of -1 (because why would it?).\n",
    "\n",
    "# Manipulating strings and lists\n",
    "\n",
    "Now that you know how to grab values from strings/lists, let's talk about how to work with them. There are a few things you might want to do. A non-exhaustive list may include\n",
    "\n",
    "- Adding/removing values\n",
    "- Changing values\n",
    "- Checking the length\n",
    "- Finding specific values and their indices\n",
    "- Splitting up\n",
    "\n",
    "### Adding new values\n",
    "\n",
    "If you want to add a value onto the end of a string or list, you could simply add them together as described in Tutorial 1 if you only want to tack onto the end/beginning."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "string1string2\n",
      "[1, 2, 3, 6]\n"
     ]
    }
   ],
   "source": [
    "print('string1' + 'string2') # string1string2\n",
    "print([1,2,3]+[6])           # [1,2,3,6]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For lists, you can also use the `append` function for single values, which uses dot notation like functions from libraries, like so"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4]\n"
     ]
    }
   ],
   "source": [
    "new_lst = [1,2,3]\n",
    "new_lst.append(4)\n",
    "print(new_lst) # [1,2,3,4]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Removing values\n",
    "\n",
    "If you want to remove a specific element from a list, you can use the `remove()` function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 3, 4]\n"
     ]
    }
   ],
   "source": [
    "a_lst = [1,2,3,4]\n",
    "a_lst.remove(2)\n",
    "print(a_lst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For strings, we can use the `replace()` function, and just insert nothing. Nothing is actually something you can type, known as the _empty string_, `''`. Using the `replace()` function with the empty string will let you remove characters. It takes two values as arguments: the string you want to replace, and the string you want to replace it with."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ring\n"
     ]
    }
   ],
   "source": [
    "a_str = 'string'\n",
    "b_str = a_str.replace('st','')\n",
    "print(b_str)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Changing values\n",
    "\n",
    "If you want to change the value of an element in a list, you just need to declare the value at that index like a new variable. For example, if I have a list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "a_lst = [1,2,3,4,5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and I want the second value to be 6, I can reassign the value at that index like so:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 6, 3, 4, 5]\n"
     ]
    }
   ],
   "source": [
    "a_lst[1] = 6\n",
    "print(a_lst) # [1,6,3,4,5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For strings you have to get creative. One option is converting the string to a list with the `list()` function, using the method above, and then turning the list back into a string using the `join()` function on an empty string. It's complicated, and I doubt you'll ever have to do it, but there it is."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "striaaaag\n"
     ]
    }
   ],
   "source": [
    "a_str = 'string'\n",
    "a_str_lst = list(a_str)\n",
    "a_str_lst[4] = 'aaaa'\n",
    "a_str2 = ''.join(a_str_lst)\n",
    "print(a_str2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Checking the length\n",
    "\n",
    "To see how many values or letters your list/string has, use the `len()` function. That's it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7\n",
      "11\n"
     ]
    }
   ],
   "source": [
    "print(len([1,2,3,4,5,6,7])) # 7\n",
    "print(len('Mississippi'))   # 11"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Finding specific values and their indices\n",
    "\n",
    "If you want to see if a value is in a string, you can use the `find()` function. This function returns the index of the **first** occurence of the value you're looking for. If it's not there, it returns a value of -1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "-1\n"
     ]
    }
   ],
   "source": [
    "print('striiing'.find('i')) # 3\n",
    "print('striiing'.find('f')) # -1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As for lists, there are a couple easy ways to go about this. You can use the logical operator `in`, which returns a boolean:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "print(4 in [1,2,3,4]) # True\n",
    "print(6 in [1,2,3,4]) # False"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Alternatively, you could use the `index()` function, which works similarly to the way `find()` does for strings, except it raises an error rather than returning -1. Not as helpful, but using `in` statements and the `index()` function in conjunction is a good way to get the index."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "5 is not in list",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-64-4b71e5d39864>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# 2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# ValueError\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m: 5 is not in list"
     ]
    }
   ],
   "source": [
    "print([1,2,3,4].index(3)) # 2\n",
    "print([1,2,3,4].index(5)) # ValueError"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Splitting up\n",
    "\n",
    "A method that I've found useful over the years has been the `split()` function. This function takes the value you want to split on as a parameter, and returns all the split versions of your string/list. For example, if I had a string that read like a list,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "a_str = \"1,2,3,4,5\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and I wanted to split the string up by the commas, I could write"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['1', '2', '3', '4', '5']\n"
     ]
    }
   ],
   "source": [
    "a_str_split = a_str.split(',')\n",
    "print(a_str_split)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As for lists, a junction of the rest of these methods would suffice."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# `numpy` arrays\n",
    "\n",
    "Next, I want to talk about another library, this time one that's not built in. This library, `numpy` is basically the `math` library but better. It has all the same functions and more, but the best part about it is a new data type called an _array_. Arrays are really just lists, but math can be performed over the whole list at once.\n",
    "\n",
    "First, I have to import `numpy`, which comes with your installation of Anaconda. It's often useful to _alias_ these libraries when you import them, i.e. give them a \"nickname\" so you don't have to type it out each time you reference it. The common alias for `numpy` is `np`, so I'll import it like so:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, I can reference the library as `np`. So, let's make our first `numpy` arrays. To do so, you simply call the `array()` function with the list you want to convert to an array as an argument:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'numpy.ndarray'>\n"
     ]
    }
   ],
   "source": [
    "array1 = np.array([1,2,3,4,5])\n",
    "array2 = np.array([4,5,6,7,8])\n",
    "print(type(array1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, rather than in the case of plain old lists, we can do math with the values inside these arrays. Adding them together no longer tacks one onto the other, but rather adds each of the corresponding values together (index 0 to index 0, etc)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 5  7  9 11 13]\n"
     ]
    }
   ],
   "source": [
    "print(array1 + array2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can also subtract, multiply, divide, and do any other kind of arithmetic:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 4 10 18 28 40]\n",
      "[4.   2.5  2.   1.75 1.6 ]\n",
      "[4.15266225 3.77767319 3.67891501 4.41694462 5.70220211]\n"
     ]
    }
   ],
   "source": [
    "print(array1 * array2)\n",
    "print(array2 / array1)\n",
    "print(np.cos(array1) + 6*np.log10(array2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Unlike lists, however, `numpy` arrays are _typed_, meaning that you can't store multiple data types in the same array. If you try to store both strings and numbers, for example, the array will default to all strings:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['1', '3.6', 'cat'], dtype='<U32')"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.array([1,3.6,'cat'])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
